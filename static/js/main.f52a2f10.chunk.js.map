{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Popup.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","src","id","alt","name","email","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Popup","onClick","closePopup","App","onSearchChange","event","setState","searchfield","target","value","openPopup","popup","state","message","fetch","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","Fragment","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCYCQ,EAjBJ,SAACC,GACX,OACC,sBAAKC,UAAU,oDAAf,UACG,qBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,cAC1D,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eC4BJC,EA/BA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAOhB,OACC,8BASDA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAO,cAAC,EAAD,CAAcR,GAAIK,EAAOG,GAAGR,GAAIE,KAAMG,EAAOG,GAAGN,KAAMC,MAAOE,EAAOG,GAAGL,OAA5DK,SCVLC,EATC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,uBAAOZ,UAAU,gBAAgBa,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,KCWxEI,G,MAdF,SAACjB,GACb,OACC,qBAAKkB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,SAAjE,SACCrB,EAAMsB,aCsBMC,G,MAxBH,SAACvB,GACZ,OACC,qBAAKC,UAAU,cAAf,SACA,qBAAKA,UAAU,iBAAf,SACA,qBAAKA,UAAU,eAAeuB,QAASxB,EAAMyB,WAA7C,qBCgHaC,E,kDA9Gd,aAAc,IAAD,8BACZ,gBAaDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAf5B,EA+BbC,UAAU,WACT,EAAKJ,SAAS,CAACK,OAAM,KAhCT,EAoCbT,WAAW,WACV,EAAKI,SAAS,CAACK,OAAM,KAnCrB,EAAKC,MAAM,CACVC,QAAQ,WACR5B,OAAO,GACPsB,YAAY,GACZI,OAAO,GANI,E,qDAmBb,WAAoB,IAAD,OAGlBG,MAAM,8CACL5C,MAAK,SAAA6C,GACL,OAAOA,EAASC,UAEhB9C,MAAK,SAAA+C,GACL,EAAKX,SAAS,CAACrB,OAAOgC,S,oBAexB,WAAS,IAAD,OAGDC,EAAeC,KAAKP,MAAM3B,OAAOmC,QAAO,SAAAC,GAC7C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAML,YAAYe,kBAGjE,OAAQJ,EAIR,eAAC,IAAMM,SAAP,WACIL,KAAKP,MAAMD,MAAQ,cAAC,EAAD,CAAOT,WAAYiB,KAAKjB,aAAgB,GAC/D,sBAAKxB,UAAU,KAAf,UACA,6BAAKyC,KAAKP,MAAMC,UAChB,wBAAQZ,QAASkB,KAAKT,UAAtB,wBACG,cAAC,EAAD,CAAWpB,aAAc6B,KAAKf,iBAC9B,cAAC,EAAD,UACH,cAAC,EAAD,CAAUnB,OAAQiC,YAVlB,oD,GAnDgBO,aCuBlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAGAC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.f52a2f10.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card=(props)=>{\r\n\treturn(\r\n\t\t<div className=\" bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t   <img src={`https://robohash.org/${props.id}?200x200`} alt=\"Roboimage\"/>\r\n\t\t   <div>\r\n\t\t       <h2>{props.name}</h2>\r\n\t\t       <p>{props.email}</p>\r\n\r\n\t\t   </div>\r\n\r\n\t\t</div>\r\n\r\n\r\n\r\n\r\n\t\t);\r\n}\r\nexport default Card;\r\n\r\n//In place of \"props\" if I give \"{id,name,email}\", then in place of \"props.id\",\"props.name\" and \"props.email\" we have to \r\n// give \"id\", \"name\" and \"email\" respectively","import React from 'react';\r\n// import {robots} from './robots';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList=({robots})=>{\r\n\r\n{\r\n\t// const cardArray=robots.map((user,i)=>{\r\n\t// \treturn <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t// })\r\n}\r\n\treturn (\r\n\t\t<div>\r\n\t\t     {  // <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n\t\t        // <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n\t\t        // <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>  \r\n\t\t    }\r\n{\r\n\t\t// {cardArray}\r\n\t}\r\n\t{\r\n\trobots.map((user,i)=>{\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t})\r\n}\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox=({searchChange})=>{\r\n\treturn (\r\n\t\t<input className=\"bg-light-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange}/>\r\n\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\treturn  (\r\n\t\t<div style={{overflowY:'scroll', border:'3px solid black',height:'500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t\r\n\t\t);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Scroll;\r\n\r\n","import React from 'react';\r\nimport './popup.css';\r\n\r\n\r\nconst Popup=(props)=>{\r\n\treturn(\r\n\t\t<div className=\"popup--back\">\r\n\t\t<div className=\"popup--content\">\r\n\t\t<div className=\"popup--close\" onClick={props.closePopup}>X</div>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Popup;","import React,{Component} from'react';\nimport CardList from '../components/CardList';\n// import {robots} from './robots';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport Popup from '../components/Popup';\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\tmessage:'Robofans',\n\t\t\trobots:[],\n\t\t\tsearchfield:'',\n\t\t\tpopup: false\n\n\t\t}\n\t\t\n\t}\n\n\t\n\n\tonSearchChange=(event)=>{\n\t\tthis.setState({searchfield:event.target.value});\n\t}\n    \n\t\n\tcomponentDidMount(){\n\t\t\n\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response=>{\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users=>{\n\t\t\tthis.setState({robots:users});\n\t\t})\n\t}\n\n\topenPopup=()=>{\n\t\tthis.setState({popup:true});\n\n\t}\n\n\tclosePopup=()=>{\n\t\tthis.setState({popup:false});\n\t}\n\t\n\n\n\trender(){\n\t\t// const {robots,searchfield}=this.state; than we can robots in place of this.state.robots and searchfield in place of this.state.searchfield, this is called destructuring.\n\n\t\tconst filteredRobots=this.state.robots.filter(robot=>{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\n\t\treturn !filteredRobots ?\n\t\t<h1>Loading.......</h1>:\n\t\t\n\t (\n\t <React.Fragment>\n\t    {this.state.popup ? <Popup closePopup={this.closePopup}/> : \"\"}\n\t\t<div className=\"tc\">\n\t\t<h1>{this.state.message}</h1>\n\t\t<button onClick={this.openPopup}>Open popup</button>\n\t    <SearchBox searchChange={this.onSearchChange}/>\n\t    <Scroll>\n\t\t<CardList robots={filteredRobots}/>\n\t\t</Scroll>\n\t\t\n\n\t\t</div>\n\t\t</React.Fragment>\n\n\t\t)\n\n\t\t}\n\t\n}\n\n\n\n\n{\n// class App extends Component{\n// \tconstructor(){\n// \t\tsuper();\n// \t\tthis.state={\n// \t\t\tname:\"Angshu\"\n// \t\t}\n// \t\tconsole.log(\"Inside constructor!\");\n// \t}\n// \tcomponentWillMount(){\n// \t\tconsole.log(\"Inside component will mount\");\n// \t\tsetTimeout(()=>{\n// \t\t\tthis.setState({name:\"Arafat\"});\n// \t\t},3000);\n\n// \t}\n\n// \tcomponentDidMount(){\n// \t\tconsole.log(\"Inside component did mount\");\n// \t\tsetTimeout(()=>{\n// \t\t\tthis.setState({name:\"Rekha\"});\n// \t\t},1000);\n\n// \t}\n// \trender(){\n// \t\tconsole.log(\"Inside render\");\n// \t\treturn(\n// \t\t\t<h1>Hello world thuis is {this.state.name}</h1>\n// \t\t\t);\n// \t}\n\n// }\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport reportWebVitals from './reportWebVitals';\nimport tachyons from 'tachyons';\n// import {robots} from './robots';\n// import CardList from './CardList';\nimport App from './containers/App';\n\n// const Layout=(props)=>{\n// \treturn(\n// \t\t<div>\n// \t\t<header>My Header</header>\n// \t\t<main>{props.children[0]}</main>\n// \t\t<h1>I am a third child</h1>\n// \t\t<main>{props.children[1]}</main>\n// \t\t</div>\n// \t\t);\n// }\n\n// const App=()=>{\n// \treturn(\n// \t<div>\n// \t  <Layout >\n// \t  <h1>I am a first child</h1>\n// \t  <h1>I am a second child</h1>\n// \t  </Layout>\n// \t  </div>\n// \t\t);\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n      \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}